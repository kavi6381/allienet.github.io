// New Flutter App Structure: AI Social Platform (18+)

import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';
import 'package:geolocator/geolocator.dart';
import 'dart:math';
import 'package:agora_rtc_engine/agora_rtc_engine.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_sound/flutter_sound.dart';
import 'package:uuid/uuid.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:video_player/video_player.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  await initializeNotifications();
  runApp(MySocialApp());
}

final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

Future<void> initializeNotifications() async {
  const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
  final InitializationSettings initializationSettings = InitializationSettings(android: initializationSettingsAndroid);
  await flutterLocalNotificationsPlugin.initialize(initializationSettings);
}

void showNotification(String title, String body) async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics = AndroidNotificationDetails(
    'default_channel_id',
    'Default',
    importance: Importance.max,
    priority: Priority.high,
  );
  const NotificationDetails platformChannelSpecifics = NotificationDetails(android: androidPlatformChannelSpecifics);
  await flutterLocalNotificationsPlugin.show(0, title, body, platformChannelSpecifics);
}

// ---------- AI Filter Upload ----------
Future<String> applyAIFilter(File imageFile, String filterName) async {
  // Mock API Call: Replace with actual AI filter backend
  final url = Uri.parse('https://example-ai-filters.com/apply');
  final request = http.MultipartRequest('POST', url);
  request.fields['filter'] = filterName;
  request.files.add(await http.MultipartFile.fromPath('image', imageFile.path));
  final streamedResponse = await request.send();
  final response = await http.Response.fromStream(streamedResponse);
  final json = jsonDecode(response.body);
  return json['filteredImageUrl'];
}

// ---------- Match Request System ----------
Future<void> sendMatchRequest(String targetUid) async {
  final currentUid = FirebaseAuth.instance.currentUser!.uid;
  await FirebaseFirestore.instance.collection('match_requests').add({
    'from': currentUid,
    'to': targetUid,
    'timestamp': Timestamp.now(),
  });
  showNotification("New Match Request", "You sent a match request to a nearby user.");
}

Stream<QuerySnapshot> getMatchRequests(String uid) {
  return FirebaseFirestore.instance.collection('match_requests').where('to', isEqualTo: uid).snapshots();
}

// ---------- Block & Report ----------
Future<void> blockUser(String targetUid) async {
  final uid = FirebaseAuth.instance.currentUser!.uid;
  final userRef = FirebaseFirestore.instance.collection('users').doc(uid);
  final snap = await userRef.get();
  List blocked = snap['blocked'] ?? [];
  blocked.add(targetUid);
  await userRef.update({'blocked': blocked});
}

Future<void> reportUser(String targetUid, String reason) async {
  await FirebaseFirestore.instance.collection('reports').add({
    'reportedUser': targetUid,
    'reason': reason,
    'reportedBy': FirebaseAuth.instance.currentUser!.uid,
    'timestamp': Timestamp.now(),
  });
  showNotification("User Reported", "Thank you. Our team will review the report.");
}

// ---------- Privacy Settings ----------
Future<void> updatePrivacySettings(bool showAge, bool showLocation) async {
  final uid = FirebaseAuth.instance.currentUser!.uid;
  await FirebaseFirestore.instance.collection('users').doc(uid).update({
    'showAge': showAge,
    'showLocation': showLocation,
  });
}

class PrivacySettingsScreen extends StatefulWidget {
  @override
  _PrivacySettingsScreenState createState() => _PrivacySettingsScreenState();
}

class _PrivacySettingsScreenState extends State<PrivacySettingsScreen> {
  bool showAge = true;
  bool showLocation = true;

  @override
  void initState() {
    super.initState();
    FirebaseFirestore.instance.collection('users').doc(FirebaseAuth.instance.currentUser!.uid).get().then((doc) {
      setState(() {
        showAge = doc['showAge'] ?? true;
        showLocation = doc['showLocation'] ?? true;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Privacy Settings")),
      body: Column(
        children: [
          SwitchListTile(
            title: Text("Show Age"),
            value: showAge,
            onChanged: (val) {
              setState(() => showAge = val);
              updatePrivacySettings(showAge, showLocation);
            },
          ),
          SwitchListTile(
            title: Text("Show Location"),
            value: showLocation,
            onChanged: (val) {
              setState(() => showLocation = val);
              updatePrivacySettings(showAge, showLocation);
            },
          )
        ],
      ),
    );
  }
}
